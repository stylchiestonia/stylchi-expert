{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, FETCH_CATEGORIES_SUCCESS, CREATE_SERVICE_EXPERT, FETCH_SERVICES_SUCCESS, FETCH_SERVICES_REQUEST, DELETE_SERVICE_EXPERT, UPDATE_SERVICE_EXPERT } from \"./types\";\naxios.defaults.headers.common = {\n  'Authorization': 'JWT ' + localStorage.jwtToken\n};\nexport var getCategories = function getCategories() {\n  return function (dispatch) {\n    axios.get(\"/categories\").then(function (res) {\n      dispatch({\n        type: FETCH_CATEGORIES_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var createExpertService = function createExpertService(servicedata) {\n  return function (dispatch) {\n    console.log('-------service create-------');\n    axios.post(\"/expert/service/create\", servicedata).then(function (res) {\n      console.log('-------service created-------', res);\n      dispatch({\n        type: CREATE_SERVICE_EXPERT,\n        payload: res.data\n      });\n    }).then(dispatch(getExpertServices())).catch(function (err) {\n      console.log('--------errr----', err);\n    });\n  };\n};\nexport var deleteExpertService = function deleteExpertService(archive_service) {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_SERVICES_REQUEST\n    });\n    axios.post(\"/expert/service/delete\", archive_service).then(function (res) {\n      dispatch({\n        type: DELETE_SERVICE_EXPERT,\n        payload: res.data\n      });\n    }).then(dispatch(getExpertServices())).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var updateExpertService = function updateExpertService(updatedService) {\n  return function (dispatch) {\n    axios.post(\"/expert/service/update\", updatedService).then(function (res) {\n      dispatch({\n        type: UPDATE_SERVICE_EXPERT,\n        payload: res.data\n      });\n    }).then(dispatch(getExpertServices())).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var getExpertServices = function getExpertServices() {\n  return function (dispatch) {\n    console.log('-------get service called-------');\n    dispatch({\n      type: FETCH_SERVICES_REQUEST\n    });\n    axios.post(\"/expert/services\").then(function (res) {\n      console.log('-------service received-------', res.data);\n      dispatch({\n        type: FETCH_SERVICES_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mahnoorfatima/Documents/admin/src/actions/serviceActions.js"],"names":["axios","GET_ERRORS","FETCH_CATEGORIES_SUCCESS","CREATE_SERVICE_EXPERT","FETCH_SERVICES_SUCCESS","FETCH_SERVICES_REQUEST","DELETE_SERVICE_EXPERT","UPDATE_SERVICE_EXPERT","defaults","headers","common","localStorage","jwtToken","getCategories","dispatch","get","then","res","type","payload","data","catch","err","response","createExpertService","servicedata","console","log","post","getExpertServices","deleteExpertService","archive_service","updateExpertService","updatedService"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { GET_ERRORS, FETCH_CATEGORIES_SUCCESS, CREATE_SERVICE_EXPERT, FETCH_SERVICES_SUCCESS, FETCH_SERVICES_REQUEST, DELETE_SERVICE_EXPERT, UPDATE_SERVICE_EXPERT} from \"./types\";\n\naxios.defaults.headers.common = {\n    'Authorization': 'JWT ' + localStorage.jwtToken\n  };\nexport const getCategories = () => dispatch => {\n    axios\n      .get(\"/categories\")\n      .then(res => {\n        dispatch({\n            type: FETCH_CATEGORIES_SUCCESS,\n            payload: res.data\n        });\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\n\n  export const createExpertService = servicedata => dispatch => {\n    console.log('-------service create-------');\n    axios\n      .post(\"/expert/service/create\", servicedata )\n      .then(res => {\n        console.log('-------service created-------', res);\n        dispatch({\n            type: CREATE_SERVICE_EXPERT,\n            payload: res.data\n        });\n      }).then(\n        dispatch(getExpertServices())\n      )\n      .catch(err => {\n        console.log('--------errr----', err)\n      })\n  };\n\n  export const deleteExpertService = archive_service => dispatch => {\n    dispatch({\n      type:FETCH_SERVICES_REQUEST\n    })\n    axios\n      .post(\"/expert/service/delete\", archive_service )\n      .then(res => {\n        dispatch({\n            type: DELETE_SERVICE_EXPERT,\n            payload: res.data\n        });\n      }).then(\n        dispatch(getExpertServices())\n      )\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\n  export const updateExpertService = updatedService => dispatch => {\n    axios\n      .post(\"/expert/service/update\", updatedService )\n      .then(res => {\n        dispatch({\n            type: UPDATE_SERVICE_EXPERT,\n            payload: res.data\n        });\n      }).then(\n        dispatch(getExpertServices())\n      )\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\n  export const getExpertServices = () => dispatch => {\n    console.log('-------get service called-------');\n    dispatch({\n      type:FETCH_SERVICES_REQUEST\n    })\n    axios\n      .post(\"/expert/services\")\n      .then(res => {\n        console.log('-------service received-------', res.data);\n        dispatch({\n            type: FETCH_SERVICES_SUCCESS,\n            payload: res.data\n        });\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };"]},"metadata":{},"sourceType":"module"}