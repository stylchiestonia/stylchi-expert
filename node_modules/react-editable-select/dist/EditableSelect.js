'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EditableSelect = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

require('./EditableSelect.css');

require('font-awesome/css/font-awesome.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function identityFunc(x) {
    return x;
}

var EditableSelect = exports.EditableSelect = function (_React$Component) {
    _inherits(EditableSelect, _React$Component);

    function EditableSelect(props) {
        _classCallCheck(this, EditableSelect);

        var _this = _possibleConstructorReturn(this, (EditableSelect.__proto__ || Object.getPrototypeOf(EditableSelect)).call(this, props));

        _this.state = { editable: false };
        return _this;
    }

    _createClass(EditableSelect, [{
        key: '_onSelectChange',
        value: function _onSelectChange(ev) {
            var value = ev.target.value;
            var options = this.props.options;

            var optionIndex = this._getOptionIndexByValue(value);
            var createOption = this.props.createOption || identityFunc;
            if (optionIndex === -1) {
                var option = createOption(value);
                this.props.onChange(ev, option);
            } else {
                var _option = options[optionIndex];
                this.props.onChange(ev, _option);
            }
        }
    }, {
        key: '_getOptionIndexByOption',
        value: function _getOptionIndexByOption(option) {
            var getOptionValue = this.props.getOptionValue || identityFunc;
            var value = getOptionValue(option);
            return this._getOptionIndexByValue(value);
        }
    }, {
        key: '_getOptionIndexByValue',
        value: function _getOptionIndexByValue(value) {
            var getOptionValue = this.props.getOptionValue || identityFunc;
            var options = this.props.options;

            if (!options) {
                return -1;
            }

            for (var i = 0; i < options.length; ++i) {
                if (value == getOptionValue(options[i])) {
                    return i;
                }
            }

            return -1;
        }
    }, {
        key: '_getOptionIndexByLabel',
        value: function _getOptionIndexByLabel(label) {
            var getOptionLabel = this.props.getOptionLabel || identityFunc;
            var options = this.props.options;

            if (!options) {
                return -1;
            }

            for (var i = 0; i < options.length; ++i) {
                if (label == getOptionLabel(options[i])) {
                    return i;
                }
            }

            return -1;
        }
    }, {
        key: '_onInputBlur',
        value: function _onInputBlur(ev) {
            var optionIndex = this._getOptionIndexByLabel(ev.target.value);
            if (optionIndex !== -1) {
                this.setState({ editable: false });
            }
        }
    }, {
        key: '_onEditClicked',
        value: function _onEditClicked(ev) {
            this.setState({ editable: true });
        }
    }, {
        key: '_onInputChange',
        value: function _onInputChange(ev) {
            var options = this.props.options;

            var value = ev.target.value;
            var optionIndex = this._getOptionIndexByLabel(value);
            if (optionIndex !== -1) {
                var option = options[optionIndex];
                this.props.onChange(ev, option);
            } else {
                var createOption = this.props.createOption || identityFunc;
                var _option2 = createOption(ev.target.value);
                this.props.onChange(ev, _option2);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                value = _props.value,
                options = _props.options,
                name = _props.name,
                id = _props.id;

            var getOptionValue = this.props.getOptionValue || identityFunc;
            var getOptionLabel = this.props.getOptionLabel || identityFunc;
            var editable = this.state.editable;


            var optionIndex = this._getOptionIndexByOption(value);
            if (!!value && optionIndex === -1) {
                editable = true;
            }

            var toggleEditableButtonHasFocus = document.activeElement && document.activeElement.classList.contains("Select2__ToggleButton");

            return _react2.default.createElement(
                _reactstrap.InputGroup,
                null,
                !editable ? _react2.default.createElement(
                    _reactstrap.Input,
                    { autoFocus: toggleEditableButtonHasFocus && !editable,
                        type: 'select',
                        name: name, id: id,
                        onChange: function onChange(ev) {
                            return _this2._onSelectChange(ev);
                        },
                        value: getOptionValue(value) || '' },
                    options.map(function (option) {
                        return _react2.default.createElement(
                            'option',
                            { key: getOptionValue(option),
                                value: getOptionValue(option) },
                            getOptionLabel(option)
                        );
                    })
                ) : _react2.default.createElement(_reactstrap.Input, { autoFocus: toggleEditableButtonHasFocus && editable,
                    type: 'text',
                    onBlur: function onBlur(ev) {
                        return _this2._onInputBlur(ev);
                    },
                    name: name,
                    id: id,
                    onChange: function onChange(ev) {
                        return _this2._onInputChange(ev);
                    },
                    value: getOptionLabel(value) || '' }),
                _react2.default.createElement(
                    _reactstrap.InputGroupAddon,
                    { addonType: 'append' },
                    _react2.default.createElement(
                        _reactstrap.Button,
                        { color: 'secondary',
                            className: 'Select2__ToggleButton',
                            disabled: editable,
                            onClick: function onClick(ev) {
                                return _this2._onEditClicked(ev);
                            } },
                        _react2.default.createElement('i', {
                            className: !editable ? "fa fa-edit" : "fa fa-list" })
                    )
                )
            );
        }
    }]);

    return EditableSelect;
}(_react2.default.Component);